#
# HT32F523xx (M0+) target script — 改进版（更健壮）
#

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME ht32f523xx
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# 默认使用 4KB 工作区（比原先 2KB 更稳健），可由外部变量覆盖
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x1000
}

# JTAG/SWD speed: should be <= F_CPU/6 after reset (F_CPU ~= 2MHz => <=333kHz)
adapter speed 300
adapter srst delay 100

if { [info exists CPUTAPID] } {
    set _CPUTAPID $CPUTAPID
} else {
    # Arm M0+ ID
    set _CPUTAPID 0x0bc11477
}

# 更健壮的 DAP 配置：加上 IR 长度 / capture / mask 参数，提高兼容性
swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap

# Work area (SRAM) 设置：默认 0x20000000，大小由上面变量控制
$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# --------------------------------------------------------------------------
# Auto-detect flash size (HT32F52342 = 64KB, HT32F52352 = 128KB)
# --------------------------------------------------------------------------
# 默认 128KB
set _FLASHSIZE 0x20000

# 读取 CHIP ID 前确保目标 halted；出错时优雅降级到默认值
if { [catch { reset halt; set _CHIPID [mrw 0x40048000] } _err] } {
    echo "Warning: Failed to read CHIP ID: $_err"
    set _CHIPID 0
} else {
    # Optional: print for debug
    echo "HT32F523xx: Chip ID = 0x[format %08X $_CHIPID]"
}

# 根据读到的 CHIPID 调整 flash size（若识别不到则保持默认）
if { ($_CHIPID == 0x52342) || ($_CHIPID == 0x52341) } {
    set _FLASHSIZE 0x10000
    echo "Detected HT32F52342/41 -> 64KB flash"
} elseif { $_CHIPID != 0 } {
    echo "Detected HT32F52352/51 or unknown -> 128KB flash (default)"
} else {
    echo "CHIPID unknown -> assume 128KB flash"
}

# --------------------------------------------------------------------------
# Flash bank definition
# --------------------------------------------------------------------------
set _FLASHNAME $_CHIPNAME.flash
# 使用你已有的 ht32f523xx 驱动名（保持和源码中注册的驱动名一致）
flash bank $_FLASHNAME ht32f523xx 0 $_FLASHSIZE 0 0 $_TARGETNAME

# Reset config: 保留 srst_nogate（你的板子如无外部 SRST gate 可用），并使用 SYSRESETREQ 作为 fallback
reset_config srst_nogate

if {![using_hla]} {
   cortex_m reset_config sysresetreq
}

# 保证 reset-start 时 adapter speed 恢复为 300
$_TARGETNAME configure -event reset-start {
    adapter speed 300
}

# examine-end: 写一些 DBG 寄存器以便在 halt 时停止看门狗等。
# 这些写操作可能在不同子型号寄存器映射不同，使用 catch 包裹以避免失败导致脚本卡死
$_TARGETNAME configure -event examine-end {
    # DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP (示例，地址可能不适用于所有芯片)
    if {[catch { mmw 0x40015804 0x00000007 0 } _err]} {
        echo "Skipping mmw 0x40015804 (not present or write failed): $_err"
    } else {
        echo "Wrote DBGMCU_CR at 0x40015804"
    }

    # Stop watchdog counters during halt
    if {[catch { mmw 0x40088304 0x00000008 0 } _err]} {
        echo "Skipping mmw 0x40088304 (not present or write failed): $_err"
    } else {
        echo "Wrote DBGMCU_APB1_FZ at 0x40088304"
    }
}